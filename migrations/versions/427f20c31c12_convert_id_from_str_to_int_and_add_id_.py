"""convert id from str to int and add id column for elective course table

Revision ID: 427f20c31c12
Revises: 295e28cbf09a
Create Date: 2024-05-08 22:18:10.989074

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = '427f20c31c12'
down_revision: Union[str, None] = '295e28cbf09a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('elective_course', sa.Column('id', sa.BigInteger(), nullable=False, autoincrement=True))
    op.add_column('elective_course', sa.Column('weekday', sa.Integer(), nullable=False))
    op.add_column('elective_course', sa.Column('time', sa.Time(), nullable=False))
    op.drop_constraint('elective_transactions_course_name_fkey', 'elective_transactions', type_='foreignkey')
    op.drop_constraint('elective_course_subject_key', 'elective_course', type_='unique')
    op.create_unique_constraint(None, 'elective_course', ['id'])
    op.drop_column('elective_course', 'timetable')

    op.drop_constraint('elective_transactions_user_id_fkey', 'elective_transactions', type_='foreignkey')

    op.execute("UPDATE elective_transactions SET user_id = CAST(user_id AS BIGINT)")
    op.execute("ALTER TABLE elective_transactions ALTER COLUMN user_id TYPE BIGINT USING user_id::BIGINT")

    op.execute("UPDATE users SET id = CAST(id AS BIGINT)")
    op.execute("ALTER TABLE users ALTER COLUMN id TYPE BIGINT USING id::BIGINT")

    op.execute("UPDATE elective_transactions SET course_name = CAST(course_name AS BIGINT)")
    op.execute("ALTER TABLE elective_transactions ALTER COLUMN course_name TYPE BIGINT USING course_name::BIGINT")

    op.create_foreign_key(None, 'elective_transactions', 'elective_course', ['course_name'], ['id'])
    op.create_foreign_key(None, 'elective_transactions', 'users', ['user_id'], ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('elective_transactions_course_name_fkey', 'elective_transactions', type_='foreignkey')
    op.drop_constraint('elective_transactions_user_id_fkey', 'elective_transactions', type_='foreignkey')

    # op.execute("UPDATE elective_transactions SET course_name = CAST(course_name AS VARCHAR)")
    op.execute("ALTER TABLE elective_transactions ALTER COLUMN course_name TYPE VARCHAR USING course_name::VARCHAR")

    # op.execute("UPDATE users SET id = CAST(id AS VARCHAR)")
    op.execute("ALTER TABLE users ALTER COLUMN id TYPE VARCHAR USING id::VARCHAR")

    # op.execute("UPDATE elective_transactions SET user_id = CAST(user_id AS VARCHAR)")
    op.execute("ALTER TABLE elective_transactions ALTER COLUMN user_id TYPE VARCHAR USING user_id::VARCHAR")

    op.create_foreign_key('elective_transactions_user_id_fkey', 'elective_transactions', 'users', ['user_id'],
                          ['id'])
    op.create_unique_constraint('elective_course_subject_key', 'elective_course', ['subject'])
    op.create_foreign_key('elective_transactions_course_name_fkey', 'elective_transactions', 'elective_course',
                          ['course_name'], ['subject'])
    op.add_column('elective_course', sa.Column('timetable', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_column('elective_course', 'time')
    op.drop_column('elective_course', 'weekday')
    op.drop_constraint('elective_course_id_key', 'elective_course', type_='unique')
    op.drop_column('elective_course', 'id')

    # ### end Alembic commands ###
